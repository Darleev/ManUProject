dist: trusty
sudo: required
services:
- docker
branches:
  only:
  - travis-ci
cache:
  ccache: true
  pip: true
  directories:
  - dpdk
  - node_modules
language:
- c
- python
before_install:
- chmod +x install-apt.sh
- tr -d '\r' < install-apt.sh > install-apt-r.sh
- chmod +x install-apt-r.sh
- chmod +x install-test.sh
- docker --version
- docker build -f ${DOCKER_PATH}/Dockerfile --tag "${DOCKER_BUILD_NAME}:${DOCKER_TAG}"
  .
- docker run --name "${DOCKER_CONTAINER_NAME}" -dit -v `pwd`:${DOCKER_WORK_DIR} "${DOCKER_BUILD_NAME}:${DOCKER_TAG}"
- docker exec "${DOCKER_CONTAINER_NAME}" /bin/sh -c './install-apt-r.sh'
- docker exec "${DOCKER_CONTAINER_NAME}" /bin/sh -c 'PATH=/opt/gcc-arm/bin:$PATH;
  ./install-test.sh; echo $PATH;'
- docker commit "${DOCKER_CONTAINER_NAME}"  "${DOCKER_COMMIT_IMAGE}:${DOCKER_TAG}"
- docker images
- docker tag "${DOCKER_COMMIT_IMAGE}:${DOCKER_TAG}" "$DOCKERUSER/${DOCKER_REPO}"
- echo $DOCKERPASS | docker login -u $DOCKERUSER --password-stdin
- docker push $DOCKERUSER/${DOCKER_REPO}
before_script:
- openssl aes-256-cbc -K $encrypted_35f96cd56ce2_key -iv $encrypted_35f96cd56ce2_iv
  -in travis_rsa.enc -out ~/.ssh/travis_rsa -d
- eval "$(ssh-agent -s)" > /dev/null
- chmod 600 ~/.ssh/travis_rsa
- ssh-add ~/.ssh/travis_rsa > /dev/null
script:
- echo "Test stage for ${DOCKER_REPO} is Started"
- >-
  sudo docker run --name ${DOCKER_TEST_CONTAINER} -dit
  -v `pwd`:${DOCKER_WORK_DIR}
  -v $SSH_AUTH_SOCK:/ssh-agent
  -e SSH_AUTH_SOCK=/ssh-agent
  -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  -e AWS_REGION=$AWS_REGION
  -e host=$host
  ${DOCKERUSER}/${DOCKER_REPO}:latest
# -v ~/.ssh:/keyfile
#- sudo docker exec ${DOCKER_TEST_CONTAINER} aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#- sudo docker exec ${DOCKER_TEST_CONTAINER} aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#- sudo docker exec ${DOCKER_TEST_CONTAINER} aws configure set default.region $AWS_REGION
- docker exec ${DOCKER_TEST_CONTAINER} /bin/sh -c 'pwd; ls -lrt; echo $PATH; PATH=/opt/gcc-arm/bin:$PATH;
  ./install-test.sh; echo $PATH'
- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'touch scripts/testfile; echo
  "this is a modified file" >> scripts/testfile; make;'
#- docker cp $(docker ps -l -q):/tmp /tmp
- docker exec ${DOCKER_TEST_CONTAINER} bash -c 'cd ../keyfile; ls -lrt; echo "Finished successfully"'
- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'ssh -tt -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $host 'pwd && sleep 1''
#- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'eval "$(ssh-agent -s)";ssh-add ../keyfile/travis_rsa; ssh -tt -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $host 'pwd && sleep 1 && exit''
- sudo docker exec ${DOCKER_TEST_CONTAINER} aws s3 ls
#- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'ssh-add -l; ssh-add -D'
- >-
  sudo docker run --name testcontainer -dit
  -v `pwd`:${DOCKER_WORK_DIR}
  -v $SSH_AUTH_SOCK:/ssh-agent
  -e SSH_AUTH_SOCK=/ssh-agent
  -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  -e AWS_REGION=$AWS_REGION
  -e host=$host
  ${DOCKERUSER}/${DOCKER_REPO}:latest
- sudo docker exec testcontainer bash -c 'ssh -tt -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $host 'pwd && sleep 1''
- sudo docker exec testcontainer aws s3 ls
#- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'ssh -tt -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $host 'sleep 1 && exit''
#- sudo docker exec ${DOCKER_TEST_CONTAINER} bash -c 'mv ../keyfile/travis_rsa ~/.ssh/id_rsa; ssh -tt -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $host 'sleep 1 && exit''
after_script:
#- cat /tmp/tmp.*
#- cat ~/.ssh/id_rsa.pub
- ssh -p 9006 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10
  ${host} 'sleep 1 && exit'
- sudo apt-get update; sudo apt-get -y install awscli
#- aws configure set default.region $AWS_REGION
#- aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#- aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
- aws s3 ls
- docker logs ${DOCKER_TEST_CONTAINER}
- docker ps -aq
- docker stop $(docker ps -aq)
- docker rm $(docker ps -aq)
- docker rmi $(docker images -q)
- ssh-add -D
- pwd; cat scripts/testfile
- rm ~/.ssh/travis_rsa
jobs:
  if: branch = travis-ci
  include:
  - stage: build
    name: Build Ubuntu16.04
    if: type = push AND commit_message=build
    env:
    - DOCKER_PATH=ubuntu16.04
    - DOCKER_BUILD_NAME=travis
    - DOCKER_CONTAINER_NAME=travis-cont-xenial
    - DOCKER_COMMIT_IMAGE=myriota-travis
    - DOCKER_TAG=16.04
    - DOCKER_REPO=travis-xenial
    - DOCKER_WORK_DIR=/CI-test-xenial
    script:
    - echo "Build stage for 16.04 is Complete and Container is ${DOCKER_CONTAINER_NAME}"
  - stage: build
    name: Build Ubuntu18.04
    if: type = push AND commit_message=build
    env:
    - DOCKER_PATH=ubuntu18.04
    - DOCKER_BUILD_NAME=travis
    - DOCKER_CONTAINER_NAME=travis-cont-bionic
    - DOCKER_COMMIT_IMAGE=myriota-travis
    - DOCKER_TAG=18.04
    - DOCKER_REPO=travis-bionic
    - DOCKER_WORK_DIR=/CI-test-bionic
    script:
    - echo "Build stage for 18.04 is Complete and Container is ${DOCKER_CONTAINER_NAME}"
  - stage: test
    name: Test on Ubuntu16.04
    env:
    - DOCKER_REPO=travis-xenial
    - DOCKER_WORK_DIR=/CI-test-xenial
    - DOCKER_TEST_CONTAINER=testcontainer-xenial
    - PATH=/opt/gcc-arm/bin:$PATH
    before_install:
    - echo $DOCKERPASS | docker login -u $DOCKERUSER --password-stdin
    - docker pull $DOCKERUSER/${DOCKER_REPO}:latest
  - stage: test
    name: Test on Ubuntu18.04
    env:
    - DOCKER_REPO=travis-bionic
    - DOCKER_WORK_DIR=/CI-test-bionic
    - DOCKER_TEST_CONTAINER=testcontainer-bionic
    - PATH=/opt/gcc-arm/bin:$PATH
    before_install:
    - docker pull $DOCKERUSER/${DOCKER_REPO}:latest
addons:
  artifacts:
    debug: true
    working_dir: "${PWD}/blinky"
    paths:
    - $(git ls-files -o | tr "\n" ":")
    - $(ls /tmp/tmp.* | tr "\n" ':')
notifications:
  email:
    recipients:
    - vismid89@gmail.com
    on_pull_requests: false
    on_success: always
    on_failure: always
    on_start: always
    on_cancel: always
    on_error: always
  slack:
    secure: eNX2TvooEww0VXGzl37bCukl/O2CQNS6Nk5kjxftaUigibFsDGR9bizPMmuBEHkSvwPcrrwT51x5/+rAdW1JR2U9megZViHHMlvJBJvMGL6BGZE53viyb4MSQ90/JGPn7tjGACUcdF0e1kpfysLMHy09isD+RZ7Cq1FHDDxZX8KL4OB/4P/rb0wos2FPlkImSHZbKaD3FiPI6sPaAS9tD4Y0nfNmQOJhTNuhrPxrR/HrQoPeDv17j/fgQUjGCwHy0KwVqu88SMHpCqboLcT1uxqlpHXf0a8EbEqU7cQyVLjhOZWZNsPR9JiSXWsD52jBDB8iIpDT3Ol2Qx/L3XbiSHr8ObCoglJKdppQbrCG3Gtiewo+SpfE9izqGVqKMku/3rXbMNQGdAOQmFSXvzjrrob4F1mkurbygQT+cvTKRmmnJ+mWe6kOP6wkj6vsGWDQ2/Hdpn1ayBX9BOOHWslk1oP4JHdHlE1xSqXhfn4zSs2HFZmdoHHLOi3TBuKFxIUi2WYxNgbuf12JD9UqTQYBui22y0DUzGEpwK8xUTDYf3xnOG8tJZie8Ug7Wvz0o8+MC2ehY7ZMi/u/bVoAs4qpy/GrsGS05s3NlSDbd0ervI220rPOTJbVUzHD9tAkgqxgd9Wb2SVzZP4k92gB93/S68J8mzc/EbMGNaIm+NNme60=
env:
  global:
  - secure: NVagUdBlBZlynoGdj79Kk+gY+avD7AiHq/CAmIgxZk+1wZVa0uVExAuqwKnLKLtHWz+C8BFg05bFURLVt0/7BAEhzCF05f0dWyhEWyg3jL1rGDwqShllZAe1/o2wEreyBUlQ7uRaDUcQQUixn5DoBOT/t+9MTDOSI14xPkntQQoVsxtgJiqO0TLP93tc5RTACkcb5rDegAO+jJJHlSptUD5GCxRBwqnmq7WddAhYqVy840bZy+n1j50efMqMeDEJvCFTyRCvjUTmxts4zmvZTN8tEb7AtuPKIk/onUsAeKyFdFRdzZ7yzwI2MpKAXSOhJfHSQ0kMotKliNfin0I0oloMMnkbXSfkMracmZgboO44Frd6kqFf3DEIFYbDgziSfD5n1CR3I7aTepU1AstW87ojkbZSNxgb6b+9PFCFQCPOLeF+gwYVvnblG6zrrqufNEw4E1LoW/FjpY0CNcoKRONoRRh/1WQOTLuoaQaTotjO9QR6dCx5QJubrKHS7Zlfm5yRwlnvav18QiynLLCF/6PZ/5DFKvqXiKimyJ7t6JBJK3Lr6XHx/nGNIwR+3Dru5cDr+TNLn7T9Z267CoJkZPkCs1GDo/HwEl9r8Q9QO3o2/G+pDiP3GL9S/C7GBOShJaHXAI8S7xRg8I/FNjp7UtL0sOox50I5QPTtJUVJQa8=
  - secure: MHVKlzKXA0wwubAZEwP3qM3MiQ0Wis3br2RLshCpqImC9WAQ4e+KybYqLlX9ideHnmOdrbTGPQgyolP/19AsEO3vvwhaId9e8vyWGvlDNsMdtPaeD0abHaNvs1vWHXV8dpBCw9pKPRZq1WZF3mTHvrjR2Xd1pXonX09znz+hYmz65+HgvaNuVJ9WPyTcyrW9peRoX5Sa8sMzJ9A0qiXl7qWIzFbqodW14fJo8UaVJNuPpB9d6yErHO/pVy1Q5ae2VPD2oevssWKZ7h+i5/fGzCZzeYg+HUq3pOkt9rHY2WMAYFbNjlHbEgsJzvSXL/QZ/Mtg9VQDHEm2va10iV7Hq3oOtXeGunQYp68U+IjcCTeHMp07eaxtI321bHx4Q1I2p26qhMXBFzPZkOL0aiPdQWHlzOfwYwU0D9B9S3FfqTW5zvyTuM3LEd9Zpe8ttIY1/r+XWOoY9uSrAGNnI/xQfsmDGsLha98S3hGVVJr7jFvy2DBL0wG87zmndcY7iAdpFIAKvkWJ0JxrtvEXXiCEMHg+M7LGTskPL6Ix7ANIqTq+ZtHYfVUm7fC9hxcdw5pYv0YrYwiVrVMCqlTtTowG1quLTtT9bB1uQSzg9qAKGQzZ4aBTAD3LdPmdtt5ehclF/fIk4ngxmHVmCfFNdYtsd6S5CCPxkEXNNVwtktBLLqQ=
  - secure: GmZEreZAQZGhteN7B95dKmOhkQ5PwSX8d/L2KIbiqv7g5UQdBqXyKwXtFjbeRZ/9Jo56+oc+silnp+v+kWCRsZpNzf+ZGeHMfSHh1nwXGk9Yh7qKCHB9u4fsHdK6RzY4hTQCLCjSfTNHYpqXYk2cklJwLeG40FaaujCJoNPKr0PBUThu95h5bV+/kMeYQO1zNbMfnfY4AD4OQo9aBMDsyJyuBwTYlIrfH1KQsC83oJIJxIgAVgp/lh1VZBGN6YOrcT4axh5HptIFIB0ESjdhSxQ5rwhKPBUPNrLXr5SHxhrqo+DNMOD7ThuTn8BT9WhKXHSFCQzeErfs0ZG0PhvLLXSurzIKTW+nvQ9t8lGkfKwunpw+BGMc8hA+TKMT8+9FxniqfZt3JIr7+li/8F7nQMEWDp9ps0LUJPBWOOIat/evmK7q5JKcmtRR78W7GoPzHESSKgwjSvOVOBuBxcvG4O/xpatV5Da4PC+2aJrvhoYk6zm4K5Al0R+IDqYtZEUptGIPY8iLrhXL3k1HlnSc1SXwfIl5/k7x+XHa13PMAXlQItAgnq98S0bDUlpMIOmBQOmC10kQKjsZ3WJJlErvozYg1lAYvIW44YzdYyGrOI+YTKOoJJ9fPNzv0pQWz7uuG3UMAdaSB+O4dL9lvBkYiWt+76YV3pa9xf3M+FXWLt0=
  - secure: jDaJkszgNzBNPt/6wQQ1UvkE6llcZGv3B+yYm23abwgq0ZkWWcbTOnhsH1XAkwo+IqxtyjQsu/+/uw8h99pQuQvOPig7B33BSuQQ+rGuW8NtvTba+2dk3/uoBT+fbzMqNCPrvHxujf3nBjjJRLuKSrP52lhATKFL9ionhBDzJmOnC3Uo8eRWI44mRGpkEgapB6DpISv2qH4UxttGaGlYMZ8F9lW/8Mu7vQcPjUqWg2D+C5Yei14FE/Y+pJMc9teq/KS/kQV4CDuFKIwMmuDT0YgX9OUXGlGd6U0nI3MqSjxrLdO57x8mVFI294CwCnV0RB5F+xznAg/hOv0/LpvZDytGfYaZ4qfuLSISmHjFOzAkQIvP1sK0gMyqmr3+jWBfb5FFufM31R+Y8OOPIX45/vUql8lXaq6hu7NCQGz80WknpX1YaesqAMvlcTGMGT0C2+2WebkFE5fF9C5iz92tflYnpqeX8Eh76k2BW7PSkDkHYjKJITFnDn4EpUV9njlH1uklrlG3GoQhPrcU8D6C3CuVShUiW5cd9H/Z2tSTOQfh2fwmTa0vOw3OHpUI7U5RX++VVU7CmER633fjJ7EIlaksVFybCSG2l5bNONQvS99TlPUF46i0uhARfYZioIG7M/nlE+SUO+W+WtkHNM/opalJ38cPIfWNBumMXl2DpwU=
